4 Adding and Committing work
Let's add a new le with some contents to the repository. Download the story of the
Hare and the Tortoise, from this URL:
http://www.std.com/obi/Fairy.Tales/Grimm/hare.and.tortoise.txt
and save it
into the local version of your Git repository. You should now have two les in there,
README.md
and
hare.and.tortoise.txt
. In that directory, let's run
git status
again.
You'll see something like this:
On branch master
Your branch is up-to-date with 'origin/master'.
Untracked files:
(use "git add <file>..." to include in what will be committed)
hare.and.tortoise.txt
nothing added to commit but untracked files present (use "git add" to track)
Your exact message might look slightly different from this, depending on which Git
version you are using, and how it is congured. However, the basic information will usu-
ally be more or less the same. The important things to note here are i) that "your branch
is up to date", which means that your version and Github are in sync, and ii) that there
are "untracked les", in this case, just the le we downloaded,
hare.and.tortoise.txt
.
So, although we have changed the local directory by adding a new le, this isn't indexed
as part of our local repository yet. This means that Git is ignoring that le.
c
Peter Lewis, Aston University, 2014.   6
Introduction to Git
7
To make it part of the repository, we rst need to
add
it. You've probably picked up
by now that we use Git by writing various commands all starting with the command
git
. So far, we've seen
git status
and
git config
. To add a le, we're going to use
git add
, and then re-check the status of our local repository:
$ git add hare.and.tortoise.txt
$ git status
I would expect to see something like:
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
(use "git reset HEAD <file>..." to unstage)
new file:   hare.and.tortoise.txt
Note that the le
hare.and.tortoise.txt
has gone from being
untracked
to being
new
. In fact, it's listed as a change to be committed. This means that if we were to
create a commit right now (remember, a commit represents a chunk of work to share)
then the addition of this le to the repository would be part of that commit. Let's do
that now.
To make a commit, we use (surprise surprise)
git commit
.  We should also add a
message to describe what the commit is, using the
-m
option:
$ git commit -m "add hare and tortoise story"
You should then see a message something like this, which tells you that the commit
was created:
[master 06c714c] add hare and tortoise story
1 file changed, 33 insertions(+)
create mode 100644 hare.and.tortoise.txt
It also gives you a bit more information about the commit, in case you're interested.
Although we added a commit message, this is just for our benet. Each commit in Git
is given a unique hash which is used as an identier. In my example, this was
06c714c
,
but yours will be different. If we ever need to refer to this commit precisely, we can use
this identier to do so. It's guaranteed never to change. Let's look at an example of
this:
$ git show 06c714c
c
Peter Lewis, Aston University, 2014.   7
Introduction to Git
8
This will show you the difference between the state of the repository before your
commit, and after it. If you're not used to reading
diffs
such as this, it's probably worth
spending some time at some point getting familiar with them, since people rely on them
a lot in team software development.
So, we have made some changes to our local repository, and committed them. But we
haven't shared these changes with anyone else. If you check the Github page in your
browser, you will notice that there's nothing to do with the Hare and the Tortoise in
there yet. To share our work, we need to
push
the new commits in our local repository
to the remote one (Github). Predictably, to do this, we use the following command:
$ git push
If all goes well, you should see something like this:
Counting objects: 4, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (3/3), done.
Writing objects: 100% (3/3), 1.42 KiB | 0 bytes/s, done.
Total 3 (delta 0), reused 0 (delta 0)
To git@github.com:username/reponame.git
df9c54e..06c714c  master -> master
Go and check out Github in your browser to check that the commit - and the Hare
and the Tortoise story - ma
